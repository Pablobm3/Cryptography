
a)

## Generate key pair
#$ openssl genrsa -out keyfile.pem 2048

# Generate encrypted (AES256) key pair
$ openssl genrsa -aes256 -out keyfile.pem 2048
## AES Password : strongpass

# Convert PEM key to DER (not encrypted)
$ openssl rsa -outform der -in keyfile.pem -out keyfile.der

# Print all components of the public and private key
$ openssl rsa -in keyfile.pem -text -noout 

# Extract public key to a file
$ openssl rsa -in keyfile.pem -out keyfile_pub.pem -outform PEM -pubout

# Print all components of the public key
$ openssl rsa -in keyfile_pub.pem -pubin -text -noout 

# Generate random key
$ openssl rand -base64 48 > key.txt

# Encrypt file with simetric key
$ openssl enc -aes-256-cbc -pass file:key.txt -in notcypherfile -out cypherfile.encrypted

# Encrypt value generated randomly with the public key
$ openssl rsautl -encrypt -in key.txt -out key.enc -inkey keyfile.pub.pem -pubin



b)


OpenSSL uses various encodings to store data structures like RSA key pairs. The two primary encodings used by OpenSSL for storing RSA key pairs are:

    PEM (Privacy-Enhanced Mail): PEM is a commonly used format in OpenSSL. It is a base64-encoded format that represents data structures in ASCII text. 
    PEM files typically have extensions like .pem, .crt, .key, or .cer. PEM format is human-readable and can store not only RSA key pairs but also other 
    cryptographic objects like X.509 certificates and private keys.

    DER (Distinguished Encoding Rules): DER is a binary format that represents data structures. It is a more compact and machine-readable encoding compared 
    to PEM. DER files typically have extensions like .der or .crt. DER format is used for encoding cryptographic objects such as RSA keys, X.509 certificates, 
    and certificate signing requests (CSRs).

The relationship between these encodings is that they can be used to represent the same data structure. For example, an RSA key pair can be stored in both 
PEM and DER formats. PEM format uses base64 encoding and includes additional header and footer lines to indicate the type of data (e.g., "BEGIN RSA PRIVATE KEY" 
and "END RSA PRIVATE KEY"). DER format, on the other hand, is a binary representation of the same data structure without any additional header or footer lines.

OpenSSL provides commands and functions to convert between these encodings. For example, the openssl rsa command can be used to convert an RSA key from PEM to 
DER format and vice versa. Similarly, OpenSSL libraries provide functions like PEM_read_*() and PEM_write_*() to handle PEM-encoded data, and d2i_*() and i2d_*() 
functions to handle DER-encoded data.

Overall, these encodings provide flexibility in how data structures like RSA key pairs can be stored and used in different scenarios, allowing interoperability 
across various systems and applications.



c)


The file you provided is an RSA private key in PEM (Privacy-Enhanced Mail) format. The content of the private key is Base64 ASCII encoded.

The PEM (Privacy-Enhanced Mail) format is an encryption convention for files that is widely used in OpenSSL. In the case of RSA private keys, the PEM format uses a 
Base64 ASCII encoding to represent the binary data of the key in a readable text form.

The RSA private key in PEM format is bounded by the lines "-----BEGIN RSA PRIVATE KEY-----" and "-----END RSA PRIVATE KEY-----". The content between these lines is 
the encrypted representation of the private key.

To use this private key in OpenSSL or other tools, you can copy the entire contents (including the start and end lines) and save it to a file with a ".pem" or ".key" 
extension.

d)

$ ls -la keyfile.*
-rw------- 1 cocopops cocopops 1216 18 mai   14:07 keyfile.der
-rw------- 1 cocopops cocopops 1874 18 mai   13:46 keyfile.pem

The .pem file is heavier than the .der file
This can be explained on the one hand by the header and footer present in the .pem format, but also by the .pem and .der encodings themselves.
The .der encoding is faithful to the real size of the stored data because it is a binary format, so it is 100% efficient.
The base64 encoding uses 8bits of data for 64 values (the equivalent of 6bits), so there is an increase of a factor of 8/6 = 4/3 = 1.33 of the size to represent the 
data with this encoding. That is also an efficiency of 6/8 bits or 75%.

e)

$ openssl rsa -in keyfile.pem -text -noout 

Private-Key: (2048 bit, 2 primes)
modulus:
    00:ba:3d:49:3d:33:20:49:95:0e:73:39:f4:f5:9a:
    aa:0f:fc:6d:d7:8d:b5:ea:dc:24:12:d9:54:27:4b:
    b6:7d:33:5d:e3:ad:5f:f8:38:1e:05:75:9d:83:6f:
    bb:1f:93:f0:b4:81:f9:b4:e2:ae:47:0d:43:ec:8f:
    bf:26:d5:1d:68:06:05:85:7d:1a:30:9f:02:f3:6b:
    f1:c8:45:61:f1:55:8f:57:1a:7e:97:48:2d:3b:d1:
    f8:29:aa:69:66:c3:b3:78:61:01:97:b8:b9:08:ce:
    4b:ec:1c:49:04:87:49:82:6e:c4:7f:84:7a:7c:c2:
    da:90:4c:00:60:63:d3:40:8e:94:02:c6:93:88:19:
    c4:c0:4b:30:e6:5d:2a:ef:5e:0c:d7:17:5f:cd:85:
    04:b5:be:1c:85:d0:9b:00:d7:eb:b8:a9:0d:e3:27:
    d5:64:fe:6f:68:26:4a:ab:07:60:47:fd:1c:ec:5d:
    0c:ee:4e:ff:f1:90:b3:0e:7b:bb:b0:06:73:1e:86:
    90:e1:8b:97:92:73:11:ae:cf:a8:3b:bd:db:4a:bb:
    c3:03:3b:ab:55:de:f7:68:03:00:23:d5:fe:53:13:
    97:93:00:73:81:18:c6:8c:5f:74:c4:0b:e1:7b:4c:
    56:36:6e:77:83:a1:a6:7c:cf:10:0f:d1:ca:8a:ef:
    15:51
publicExponent: 65537 (0x10001)
privateExponent:
    0a:ef:0c:cb:03:12:b3:e1:34:6e:c9:3d:f7:72:99:
    e5:fb:fd:58:a2:a3:25:cf:80:6e:6b:1c:0e:bd:ca:
    20:1f:f5:34:d7:fd:96:b3:78:37:3c:b6:47:74:76:
    7f:5a:4a:8f:15:63:a3:26:0d:02:62:bd:ec:70:2c:
    c2:2f:50:35:76:87:89:d4:8c:36:63:2a:7b:9f:28:
    6b:e8:1f:61:b9:52:c3:d3:cc:4f:6e:43:4a:14:17:
    da:3d:dd:07:e5:88:c6:82:26:f3:58:ea:e3:90:85:
    7a:6e:57:6e:d4:b0:b9:0f:ae:d9:77:ee:0f:3f:ab:
    10:5e:46:e6:21:cc:31:e9:a7:3e:c1:35:1b:03:da:
    c4:a3:c1:80:03:7e:3e:05:be:4d:93:2c:a6:93:72:
    9f:97:3a:ae:ad:58:43:a5:a9:96:7d:91:9f:54:98:
    45:3f:80:89:46:47:6d:ef:73:b9:f2:ea:d7:bf:fa:
    d9:de:f5:67:f4:6a:6a:df:8d:34:4e:97:7e:73:4b:
    48:69:c3:62:f4:f0:2c:ea:8b:61:77:32:06:53:8c:
    d3:76:03:75:4f:0d:d0:c4:87:c3:2a:0c:6c:9f:e7:
    71:7f:e5:aa:36:d7:87:d3:87:c3:4a:22:65:97:c1:
    66:bc:62:71:86:aa:1d:76:c7:b6:e6:fa:bf:fb:70:
    61
prime1:
    00:c8:fb:35:3b:00:03:39:2e:fc:5c:d0:0e:28:6f:
    a7:0b:3c:09:74:60:fd:08:07:b2:ae:c7:53:d4:b3:
    45:f1:c5:e1:2f:d3:02:38:df:41:f8:fc:b7:24:dd:
    52:1b:96:a7:e3:11:00:f2:0b:ab:06:45:1d:23:d6:
    fe:7a:2a:c4:dc:3e:0e:05:da:56:db:82:72:0e:95:
    76:49:2e:3c:be:e2:ae:4d:2f:dd:08:4e:fe:ca:85:
    4d:ec:4c:4a:33:fe:0d:9b:0d:03:11:4b:ec:2f:3b:
    f7:91:60:03:74:b2:7e:6f:48:0e:d6:0b:bc:6d:e0:
    9b:30:c9:ad:a0:d0:30:22:31
prime2:
    00:ed:38:f7:1e:01:cb:ff:84:d0:73:8d:0b:cb:c0:
    62:61:62:22:77:e1:71:c3:6a:42:40:a4:b0:c8:d0:
    b5:60:e3:bc:c7:0f:98:95:1a:06:a5:c4:2d:06:db:
    c8:ba:41:5a:29:db:3d:0f:36:cd:db:90:4f:74:aa:
    9c:46:f4:ed:d5:91:36:41:00:75:37:81:36:a8:fe:
    98:70:96:a0:03:64:4a:e1:0f:3f:fc:64:51:ec:15:
    5a:f9:4a:25:3d:96:e4:81:93:7c:80:60:dc:d9:34:
    d9:02:6f:fc:af:85:6a:14:06:b8:13:f2:e7:7e:a7:
    c3:08:51:88:f9:a3:a5:3d:21
exponent1:
    3c:b2:e9:cb:ac:e0:4c:57:ed:6d:d6:84:40:20:20:
    72:1b:2a:bb:d4:42:f7:36:e3:f7:37:4a:11:36:27:
    8c:b2:77:a5:2a:f4:43:da:e1:a0:e2:2a:29:df:11:
    da:35:30:f5:3a:00:70:19:a8:08:57:bd:4a:42:b7:
    4e:8c:36:32:52:27:88:0a:fe:2a:83:86:10:f3:80:
    ea:ef:24:f7:7d:9c:a8:c1:28:df:46:84:5b:03:d1:
    99:e9:1c:8c:01:51:78:9f:80:6a:ab:e4:64:0b:97:
    64:77:7b:f3:b5:a8:cb:d1:16:71:fc:cf:66:db:eb:
    e2:db:36:2e:18:52:41:31
exponent2:
    39:61:0a:04:ec:12:57:df:dc:3b:d6:e5:ff:86:ad:
    45:38:e3:75:73:c6:7c:a9:fb:14:7f:c1:73:11:68:
    8d:e3:08:0a:6e:2f:4e:01:59:92:46:fd:4d:27:64:
    4a:08:fc:b2:1b:21:8d:c8:87:ca:90:01:68:0a:cc:
    7a:2d:4c:49:d8:31:f3:4f:15:0b:33:e9:f0:be:84:
    48:d7:66:24:eb:e1:60:c6:bb:87:65:0c:9b:ba:1e:
    a3:25:d8:14:29:a7:63:e0:34:c1:28:ac:c2:ad:11:
    c0:91:2d:e1:96:b7:ad:d8:62:36:11:0f:05:87:b6:
    99:10:7f:bd:42:63:f9:81
coefficient:
    5a:4b:e1:e4:e9:ff:7b:46:a6:ec:bf:97:8d:1e:35:
    cf:3f:83:dd:87:c7:63:76:69:6d:2d:56:ee:78:3a:
    73:e4:b1:6e:eb:a3:7e:c4:7e:6a:cb:c8:06:db:2e:
    35:4f:ae:fc:30:c5:43:3e:82:bd:9d:f8:3d:cb:d7:
    b6:b5:90:2c:46:0e:c6:ca:40:38:66:2b:6a:66:32:
    e5:51:b5:75:e7:ee:87:ec:77:58:2c:8d:28:0a:34:
    ae:e2:0d:af:df:a7:7c:b9:aa:15:95:c0:b0:04:47:
    6c:e1:19:73:89:c2:86:0e:bc:59:95:8e:e3:67:9f:
    0d:9f:72:45:f9:86:0c:76


f)

$ openssl rsa -in keyfile_pub.pem -pubin -text -noout 

Public-Key: (2048 bit)
Modulus:
    00:ba:3d:49:3d:33:20:49:95:0e:73:39:f4:f5:9a:
    aa:0f:fc:6d:d7:8d:b5:ea:dc:24:12:d9:54:27:4b:
    b6:7d:33:5d:e3:ad:5f:f8:38:1e:05:75:9d:83:6f:
    bb:1f:93:f0:b4:81:f9:b4:e2:ae:47:0d:43:ec:8f:
    bf:26:d5:1d:68:06:05:85:7d:1a:30:9f:02:f3:6b:
    f1:c8:45:61:f1:55:8f:57:1a:7e:97:48:2d:3b:d1:
    f8:29:aa:69:66:c3:b3:78:61:01:97:b8:b9:08:ce:
    4b:ec:1c:49:04:87:49:82:6e:c4:7f:84:7a:7c:c2:
    da:90:4c:00:60:63:d3:40:8e:94:02:c6:93:88:19:
    c4:c0:4b:30:e6:5d:2a:ef:5e:0c:d7:17:5f:cd:85:
    04:b5:be:1c:85:d0:9b:00:d7:eb:b8:a9:0d:e3:27:
    d5:64:fe:6f:68:26:4a:ab:07:60:47:fd:1c:ec:5d:
    0c:ee:4e:ff:f1:90:b3:0e:7b:bb:b0:06:73:1e:86:
    90:e1:8b:97:92:73:11:ae:cf:a8:3b:bd:db:4a:bb:
    c3:03:3b:ab:55:de:f7:68:03:00:23:d5:fe:53:13:
    97:93:00:73:81:18:c6:8c:5f:74:c4:0b:e1:7b:4c:
    56:36:6e:77:83:a1:a6:7c:cf:10:0f:d1:ca:8a:ef:
    15:51
Exponent: 65537 (0x10001)

g)

$ openssl asn1parse -inform DER -in keyfile.der 
    0:d=0  hl=4 l=1212 cons: SEQUENCE          
    4:d=1  hl=2 l=   1 prim: INTEGER           :00
    7:d=1  hl=2 l=  13 cons: SEQUENCE          
    9:d=2  hl=2 l=   9 prim: OBJECT            :rsaEncryption
   20:d=2  hl=2 l=   0 prim: NULL              
   22:d=1  hl=4 l=1190 prim: OCTET STRING      [HEX DUMP]:308204A20201000282010100BA3D493D332049950E7339F4F59AAA0FFC6DD78DB5EADC2412D954274BB67D335DE3AD5FF8381E05759D836FBB1F93F0B481F9B4E2AE470D43EC8FBF26D51D680605857D1A309F02F36BF1C84561F1558F571A7E97482D3BD1F829AA6966C3B378610197B8B908CE4BEC1C49048749826EC47F847A7CC2DA904C006063D3408E9402C6938819C4C04B30E65D2AEF5E0CD7175FCD8504B5BE1C85D09B00D7EBB8A90DE327D564FE6F68264AAB076047FD1CEC5D0CEE4EFFF190B30E7BBBB006731E8690E18B97927311AECFA83BBDDB4ABBC3033BAB55DEF768030023D5FE5313979300738118C68C5F74C40BE17B4C56366E7783A1A67CCF100FD1CA8AEF15510203010001028201000AEF0CCB0312B3E1346EC93DF77299E5FBFD58A2A325CF806E6B1C0EBDCA201FF534D7FD96B378373CB64774767F5A4A8F1563A3260D0262BDEC702CC22F5035768789D48C36632A7B9F286BE81F61B952C3D3CC4F6E434A1417DA3DDD07E588C68226F358EAE390857A6E576ED4B0B90FAED977EE0F3FAB105E46E621CC31E9A73EC1351B03DAC4A3C180037E3E05BE4D932CA693729F973AAEAD5843A5A9967D919F5498453F808946476DEF73B9F2EAD7BFFAD9DEF567F46A6ADF8D344E977E734B4869C362F4F02CEA8B61773206538CD37603754F0DD0C487C32A0C6C9FE7717FE5AA36D787D387C34A226597C166BC627186AA1D76C7B6E6FABFFB706102818100C8FB353B0003392EFC5CD00E286FA70B3C097460FD0807B2AEC753D4B345F1C5E12FD30238DF41F8FCB724DD521B96A7E31100F20BAB06451D23D6FE7A2AC4DC3E0E05DA56DB82720E9576492E3CBEE2AE4D2FDD084EFECA854DEC4C4A33FE0D9B0D03114BEC2F3BF791600374B27E6F480ED60BBC6DE09B30C9ADA0D030223102818100ED38F71E01CBFF84D0738D0BCBC06261622277E171C36A4240A4B0C8D0B560E3BCC70F98951A06A5C42D06DBC8BA415A29DB3D0F36CDDB904F74AA9C46F4EDD59136410075378136A8FE987096A003644AE10F3FFC6451EC155AF94A253D96E481937C8060DCD934D9026FFCAF856A1406B813F2E77EA7C3085188F9A3A53D210281803CB2E9CBACE04C57ED6DD684402020721B2ABBD442F736E3F7374A1136278CB277A52AF443DAE1A0E22A29DF11DA3530F53A007019A80857BD4A42B74E8C36325227880AFE2A838610F380EAEF24F77D9CA8C128DF46845B03D199E91C8C0151789F806AABE4640B9764777BF3B5A8CBD11671FCCF66DBEBE2DB362E1852413102818039610A04EC1257DFDC3BD6E5FF86AD4538E37573C67CA9FB147FC17311688DE3080A6E2F4E01599246FD4D27644A08FCB21B218DC887CA9001680ACC7A2D4C49D831F34F150B33E9F0BE8448D76624EBE160C6BB87650C9BBA1EA325D81429A763E034C128ACC2AD11C0912DE196B7ADD86236110F0587B699107FBD4263F9810281805A4BE1E4E9FF7B46A6ECBF978D1E35CF3F83DD87C76376696D2D56EE783A73E4B16EEBA37EC47E6ACBC806DB2E354FAEFC30C5433E82BD9DF83DCBD7B6B5902C460EC6CA4038662B6A6632E551B575E7EE87EC77582C8D280A34AEE20DAFDFA77CB9AA1595C0B004476CE1197389C2860EBC59958EE3679F0D9F7245F9860C76

$ openssl asn1parse -inform PEM -in keyfile.pem 
    0:d=0  hl=4 l=1325 cons: SEQUENCE          
    4:d=1  hl=2 l=  87 cons: SEQUENCE          
    6:d=2  hl=2 l=   9 prim: OBJECT            :PBES2
   17:d=2  hl=2 l=  74 cons: SEQUENCE          
   19:d=3  hl=2 l=  41 cons: SEQUENCE          
   21:d=4  hl=2 l=   9 prim: OBJECT            :PBKDF2
   32:d=4  hl=2 l=  28 cons: SEQUENCE          
   34:d=5  hl=2 l=   8 prim: OCTET STRING      [HEX DUMP]:7C4D6E0D179EB370
   44:d=5  hl=2 l=   2 prim: INTEGER           :0800
   48:d=5  hl=2 l=  12 cons: SEQUENCE          
   50:d=6  hl=2 l=   8 prim: OBJECT            :hmacWithSHA256
   60:d=6  hl=2 l=   0 prim: NULL              
   62:d=3  hl=2 l=  29 cons: SEQUENCE          
   64:d=4  hl=2 l=   9 prim: OBJECT            :aes-256-cbc
   75:d=4  hl=2 l=  16 prim: OCTET STRING      [HEX DUMP]:2D940F1E91AB3C17D30D455A59FE7C3F
   93:d=1  hl=4 l=1232 prim: OCTET STRING      [HEX DUMP]:767A2ABDD13CC44AA9160E7FEE2644745B2768493695C43EF3D2B625BBF81245D20D36F76495005C73D0DF779F76C9174F67DFFB6D786A6A7E57BB06FB94B62645FDA462CA088593A321647B41DB863C996D0FFEC777903C15A2AC78914588AAB3A5A06ECE9B9F178A645665D358D143443F1F5F15A530B7A37B0164F513DBE3BABF78F1732E36EA3602797A9EF15495C23F8EDC7A0B73093F553BB012752E62DAF3DB07E05BA6060AD032D49EE1D05A7593F20FA53341D39BF7F8F5AFEB7BC1DBEA5D55214840A0DE69BFF5B198C4A4F0A7EB7988D9F0793E65097C24867473750DC0839CCBDB7D9CCA9111C1BB867A43FBD8D7D06F328D393DDE5A6C9E3864DA4DF19CE173BC70E804208F5C6129F262AD8720209FEDD31D65BFE05C707495B134A9989AFDADBE7184912142F19D24DF3611B0AF5C1496D3569FA5673907EE3C93C8CB606EC81C8FACF72C23E8891046292A4B0F1A3600A8F988E729E8B6D89506D335144402A9D6C71AD6E5DA7890984C149F5B01B14448B962F94C7276BF0FDE980CAD6EBE21B3DB90E5142055391578A5034C64BB8918AEF43253D735E7A80A7123D3AE280E49566B797E6DF08C58DB8DA87EAF6308E4D784152813F2F4370E0587E8E3A4624A88B966A4B0580ABC7DA624A3A9F8A3CDF24D98FDEB8E217A5660D8F557055906F412B427946438CFAD22C4904A866225B46BBA5B873B578129585E1AC90CB327C661A7FBD3C3D97051C47028A91AE1742EF811C72960D3B894862EAB420C3561217C7CE7F06F72D328F54EB887C393091F26B800C090D67B1E65C6AE6DF4C6C74E45287B65E984A47F174C5FE91218035E290A02D7423DA75E4617074FD0D475607E63EF0BA1A5B144F02CB82593C9DA37AADF7EDEE33582FBB1DE0D4288FCA95B1496963A69F652ED004C001DB669BA256C92F9FD4E19884435C99E855C6D849B8D734924456D1B09C01DF0F560E015362F2896AF49696507B7B876E2E4B40461A55B4BC660A4B3F39F9DB8CBF985ED9CB2837AA80CB7836CAD418C17046A9DE07FDA0EA31E8AFBD53B999F9F4E3FF48E86B5FDB334B0D6FE7E4297E3B28DD975D3471F50A1647B9D72DAAEEFBC1B2CA5FD171E0683241871347596B9A1A1FDE8B894E3B325F3F3BC4C197D05007A1AD1EFF849A3BB727E29FE165E2904D201B78531C29ACC9B5DDD9BEB1D529B2C149BCB160CCC02CF3B369F0C6681E618791A88AE097A07705A08402E66499FF07A3B188EF5348E8060073651809CC270453E15FCD5749B11EEF4F73F0EACDE0C469F31B6228AECE999A024E1E0D66115DA6C66E6B5836898779385A80FB7DA8EAEFBA5F34C30EFF78A09D400AB1C0B1FA71A3C9DCBE3C6630A581E0697B3A25413C94351114CAC0846A124B630A42793A862F8690F7D3851F9BEF94F2C5B557A59680BB06CAFA5B476120A80F4223D2015F565EB92E52CE89E483A52D8140BF05D11B0195BCAAD0818BC32629D5041A021CE80C08B9E7B5E65764B5049D4735AF9136823C50B59D5A2AF77B019092ED42890C06C02F8410736E22F503AC37BC9A489ED3016B0564DC8D7B80CB2A1DB2C5A9D4BE806B004918DD76FAACDAED872FE9BC7669F907DC002317368C8535EDD41B75A89DDE8343834504CF9C938DE29DC466A1F7EB8A71193F0B06DA7C86BEE344308C09BEC5CBF5B7E374B3947923A9224FB7EB41FB521D78A0C0B6E8E9A05BCD506A28D1AF7DE

$ openssl asn1parse -inform PEM -in keyfile_pub.pem 
    0:d=0  hl=4 l= 290 cons: SEQUENCE          
    4:d=1  hl=2 l=  13 cons: SEQUENCE          
    6:d=2  hl=2 l=   9 prim: OBJECT            :rsaEncryption
   17:d=2  hl=2 l=   0 prim: NULL              
   19:d=1  hl=4 l= 271 prim: BIT STRING        

h)

# Sign keyfile.der with keyfile.pem and SHA512
$ openssl dgst -sha512 -sign keyfile.pem -out signed_keyfile_der.sha512 keyfile.der
# Verify signature with public key
$ openssl dgst -sha512 -verify keyfile_pub.pem -signature signed_keyfile_der.sha512 keyfile.der 
Verified OK
